@use '../util/breakpoints' as breakpoints;
@use '../abstracts/mixins' as mixins;
@use '../abstracts/variables' as var;
@use 'sass:math';

$grid-columns: 12;
$grid-gaps: (
  '0': 0,
  '1': var.$padding-base,
  '2': var.$padding-base * 2,
  '3': var.$padding-base * 3,
  '4': var.$padding-base * 4,
);

.grid-container {
  width: 100%;
  max-width: map-get(breakpoints.$breakpoints, '>=lg');
  box-sizing: border-box;
  margin: 0 auto;
}

.grid-row {
  display: flex;
  flex-flow: row wrap;
}

@each $key, $val in $grid-gaps {
  .gap-#{$key} > * {
    padding: $val;
  }
}

@include mixins.breakpoint('>=xs') {
  @for $i from 1 through $grid-columns {
    .col-#{$i}-xs {
      box-sizing: border-box;
      flex-grow: 0;
      width: math.div($i * 100%, $grid-columns);
    }
  }
}

@include mixins.breakpoint('>=sm') {
  @for $i from 1 through $grid-columns {
    .col-#{$i}-sm {
      box-sizing: border-box;
      flex-grow: 0;
      width: math.div($i * 100%, $grid-columns);
    }
  }
}

@include mixins.breakpoint('>=md') {
  @for $i from 1 through $grid-columns {
    .col-#{$i}-md {
      box-sizing: border-box;
      flex-grow: 0;
      width: math.div($i * 100%, $grid-columns);
    }
  }
}

@include mixins.breakpoint('>=lg') {
  @for $i from 1 through $grid-columns {
    .col-#{$i}-lg {
      box-sizing: border-box;
      flex-grow: 0;
      width: math.div($i * 100%, $grid-columns);
    }
  }
}

@include mixins.breakpoint('>=xl') {
  @for $i from 1 through $grid-columns {
    .col-#{$i}-xl {
      box-sizing: border-box;
      flex-grow: 0;
      width: math.div($i * 100%, $grid-columns);
    }
  }
}
